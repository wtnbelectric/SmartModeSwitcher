<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/smartmodeswitcher/data/Rule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/smartmodeswitcher/data/Rule.kt" />
              <option name="originalContent" value="package com.example.smartmodeswitcher.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;rules&quot;)&#10;data class Rule(&#10;    @PrimaryKey(autoGenerate = true) val id: Int = 0,&#10;    val enabled: Boolean = true,&#10;    val startTime: String,&#10;    val endTime: String,&#10;    val latitude: Double? = null,&#10;    val longitude: Double? = null,&#10;    val radius: Int? = null,&#10;    val mode: Int&#10;)" />
              <option name="updatedContent" value="package com.example.smartmodeswitcher.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;rules&quot;)&#10;data class Rule(&#10;    @PrimaryKey(autoGenerate = true) val id: Int = 0,&#10;    val enabled: Boolean = true,&#10;    val startTime: String,&#10;    val endTime: String,&#10;    val days: String, // &quot;0111110&quot;（日〜土、1:有効, 0:無効）&#10;    val latitude: Double? = null,&#10;    val longitude: Double? = null,&#10;    val radius: Int? = null,&#10;    val mode: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/smartmodeswitcher/ui/RuleListFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/smartmodeswitcher/ui/RuleListFragment.kt" />
              <option name="originalContent" value="package com.example.smartmodeswitcher.ui&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.smartmodeswitcher.data.AppDatabase&#10;import com.example.smartmodeswitcher.data.Rule&#10;import com.example.smartmodeswitcher.data.RuleRepository&#10;import com.example.smartmodeswitcher.databinding.FragmentRuleListBinding&#10;&#10;class RuleListFragment : Fragment(), RuleListAdapter.OnRuleActionListener {&#10;    private var _binding: FragmentRuleListBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var repository: RuleRepository&#10;    private val viewModel: RuleListViewModel by viewModels {&#10;        RuleListViewModelFactory(repository)&#10;    }&#10;    &#10;    private lateinit var adapter: RuleListAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // RoomDatabaseとRepositoryの初期化&#10;        val db = AppDatabase.getInstance(requireContext().applicationContext)&#10;        repository = RuleRepository(db.ruleDao())&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentRuleListBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        // repositoryの初期化はDIやApplicationクラス経由で行うのが推奨&#10;        &#10;        // Set up RecyclerView&#10;        adapter = RuleListAdapter(this)&#10;        binding.recyclerView.adapter = adapter&#10;        binding.recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        binding.recyclerView.adapter = adapter&#10;&#10;        viewModel.allRules.observe(viewLifecycleOwner) { rules -&gt;&#10;            adapter.submitList(rules)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;    &#10;    override fun onEditRule(rule: Rule) {&#10;        // Navigate to edit fragment with the rule&#10;        // You'll need to implement this navigation&#10;    }&#10;    &#10;    override fun onDeleteRule(rule: Rule) {&#10;        viewModel.delete(rule)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.smartmodeswitcher.ui&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.smartmodeswitcher.data.AppDatabase&#10;import com.example.smartmodeswitcher.data.Rule&#10;import com.example.smartmodeswitcher.data.RuleRepository&#10;import com.example.smartmodeswitcher.databinding.FragmentRuleListBinding&#10;&#10;class RuleListFragment : Fragment(), RuleListAdapter.OnRuleActionListener {&#10;    private var _binding: FragmentRuleListBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private lateinit var repository: RuleRepository&#10;    private val viewModel: RuleListViewModel by viewModels {&#10;        RuleListViewModelFactory(repository)&#10;    }&#10;    &#10;    private lateinit var adapter: RuleListAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // RoomDatabaseとRepositoryの初期化&#10;        val db = AppDatabase.getInstance(requireContext().applicationContext)&#10;        repository = RuleRepository(db.ruleDao())&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentRuleListBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        // repositoryの初期化はDIやApplicationクラス経由で行うのが推奨&#10;        &#10;        // Set up RecyclerView&#10;        adapter = RuleListAdapter(this)&#10;        binding.recyclerView.adapter = adapter&#10;        binding.recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        binding.recyclerView.adapter = adapter&#10;&#10;        viewModel.allRules.observe(viewLifecycleOwner) { rules -&gt;&#10;            adapter.submitList(rules)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;    &#10;    override fun onEditRule(rule: Rule) {&#10;        // ルール編集画面へ遷移（編集対象のRuleをBundleで渡す）&#10;        val fragment = RuleEditFragment().apply {&#10;            arguments = Bundle().apply {&#10;                putInt(&quot;rule_id&quot;, rule.id)&#10;            }&#10;        }&#10;        requireActivity().supportFragmentManager.beginTransaction()&#10;            .replace(com.example.smartmodeswitcher.R.id.fragment_container, fragment)&#10;            .addToBackStack(null)&#10;            .commit()&#10;    }&#10;    &#10;    override fun onDeleteRule(rule: Rule) {&#10;        viewModel.delete(rule)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>